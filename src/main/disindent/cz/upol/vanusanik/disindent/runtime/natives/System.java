// autogenerated java class stub
package cz.upol.vanusanik.disindent.runtime.natives;

import java.util.ArrayList;
import java.util.List;

import org.apache.commons.lang3.StringUtils;

import cz.upol.vanusanik.disindent.runtime.DisindentException;
import cz.upol.vanusanik.disindent.runtime.network.NetworkExecutionResult;
import cz.upol.vanusanik.disindent.runtime.network.NetworkExecutor;
import cz.upol.vanusanik.disindent.runtime.types.Method;
import cz.upol.vanusanik.disindent.runtime.types.DList;

public class System {
	
    public static Object apply(Method f, DList<Object> arguments) throws Throwable {
    	Object[] args = arguments.toObjectArray();
    	return f.invoke(args);
    }
    
    public static Object distributed(Method f, int tCount, DList<Object> arguments) throws Throwable {
    	if (tCount <= 0)
    		throw new DisindentException("type_error", "distributed-> second argument must be positive number above 0");
    	
    	NetworkExecutionResult result;
    	try {
    		result = NetworkExecutor.execute(f, tCount, arguments.toObjectArray());
    	} catch (Exception e){
    		throw new DisindentException("error", e.getClass().getName() + ": " + e.getMessage());
    	}
    	
    	if (result.hasExceptions()){
    		List<String> excp = new ArrayList<String>();
    		for (int i=0; i<result.exceptions.length; i++)
    			excp.add(result.exceptions[i] + "->" + result.exceptionMessages[i]);
    		
    		String msg = "network exceptions[";
    		msg += StringUtils.join(excp, ", ") + "]";
    		throw new DisindentException("network_error", msg);
    	}
    	
    	return DList.asList(result.results);
    }

}
